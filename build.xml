<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2009-2012 Institute of Meteorology and Water Management, IMGW

This file is part of the BaltradDex software.

BaltradDex is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

BaltradDex is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the BaltradDex software.  If not, see http://www.gnu.org/licenses.
-->

<project name="BaltradDex" basedir="." default="dist">
  <description>Builds and deploys BaltradDex application</description>
  <property name="app.name" value="BaltradDex | Data Exchange System"/>
  <property name="root.dir" value="${basedir}"/>
  <property name="script.dir" value="${root.dir}/script"/>
  <property name="lib.dir" value="lib"/>
  <property name="extralib.dir" value="extralib"/>
  <property name="src.dir" value="src"/>
  <property name="web.dir" value="web"/>
  <property name="webinf.dir" value="${web.dir}/WEB-INF"/>
  <property name="etc.dir" value="etc"/>
  <property name="dist.dir" value="${root.dir}/dist"/>
  <property name="build.dir" value="build"/>
  <property name="build.web.dir" value="${build.dir}/web"/>
  <property name="build.metainf.dir" value="${build.web.dir}/META-INF"/>
  <property name="build.webinf.dir" value="${build.web.dir}/WEB-INF"/>
  <property name="build.jsp.dir" value="${build.webinf.dir}/jsp"/>
  <property name="build.classes.dir" value="${build.webinf.dir}/classes"/>
  <property name="build.lib.dir" value="${build.webinf.dir}/lib"/>
  <property name="build.test.dir" value="${build.dir}/test" />
  <property name="build.itest.dir" value="${build.dir}/itest"/>  
  <property name="test.conf.dir" value="${build.test.dir}/conf" />
  <property name="compile.debug" value="true"/>
  <property name="compile.includeAntRuntime" value="no"/>
  <property name="compile.optimize" value="true"/>
  <property name="javahdf.path" value="/opt/baltrad/third_party/hdf-java"/>
  <property name="include.dir" value="${web.dir}/includes"/>
  <property name="doc.dir" value="${root.dir}/doc"/>
  <property name="doc.build.dir" value="${doc.dir}/build"/>
  <property name="javadoc.dir" value="${doc.build.dir}/javadoc"/>
  <property name="doxygen.dir" value="${doc.build.dir}/doxygen"/>
  <!-- You can override properties in these files -->
  <property file="${etc.dir}/develop.properties" />
  <property file="${etc.dir}/db.properties"/>
  <property file="${etc.dir}/appserver.properties"/>
  <property file="${etc.dir}/testdb.properties" />
  <property file="${etc.dir}/dex.properties" />

  <property environment="env"/>

  <property name="install.prefix" value="/opt/baltrad"/>
  <property name="bdb.sources.file" 
            value="/opt/baltrad/rave/config/odim_source.xml"/>
  <!--<property name="jksfile" value="" /> --> 
  <!-- Specify jksfile on command line and we will use that file -->

  <property name="baltrad.db.path" value="/opt/baltrad/baltrad-db" />
  <property name="beast.path" value="/opt/baltrad/beast" />

  <!-- Configure ant tasks for tomcat deployment -->
  <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask"
		classpath="${lib.dir}/catalina-ant/catalina-ant.jar"/>
  <taskdef name="list" classname="org.apache.catalina.ant.ListTask"
		classpath="${lib.dir}/catalina-ant/catalina-ant.jar"/>
  <taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask"
		classpath="${lib.dir}/catalina-ant/catalina-ant.jar"/>
  <taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask"
		classpath="${lib.dir}/catalina-ant/catalina-ant.jar"/>
  <taskdef name="roles" classname="org.apache.catalina.ant.RolesTask"
		classpath="${lib.dir}/catalina-ant/catalina-ant.jar"/>
  <taskdef name="start" classname="org.apache.catalina.ant.StartTask"
		classpath="${lib.dir}/catalina-ant/catalina-ant.jar"/>
  <taskdef name="stop" classname="org.apache.catalina.ant.StopTask"
		classpath="${lib.dir}/catalina-ant/catalina-ant.jar"/>
  <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask"
		classpath="${lib.dir}/catalina-ant/catalina-ant.jar"/>

  <!-- initialize library path -->
  <path id="lib.path">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${extralib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <!-- initialize dependent library path -->
  <path id="dep.lib.path">
    <fileset dir="${baltrad.db.path}/share/baltrad-bdb/java">
        <include name="baltrad-bdb-client.jar"/>
    </fileset>
    <fileset dir="${baltrad.db.path}/share/baltrad-bdb/java/libs">
        <include name="*.jar"/>
    </fileset>
    <fileset dir="${beast.path}/bin">
        <include name="*.jar"/>
    </fileset>
    <fileset dir="${beast.path}/libs">
        <include name="*.jar"/>
    </fileset>
    <fileset dir="${javahdf.path}/lib">
        <include name="*.jar"/>
    </fileset>
  </path>     

  <!-- path for testing -->
  <path id="test.lib.path">
    <fileset dir="${lib.dir}">
      <include name="junit/*.jar"/>
      <include name="ant-junit/*.jar"/>
      <include name="easymock/*.jar"/>
      <include name="cglib/*.jar"/>
      <include name="jetty/*.jar"/>
      <include name="jetty/*.jar"/>
      <include name="jakarta-commons/commons-fileupload-1.2.1.jar"/>
    </fileset>
    <fileset dir="${beast.path}/libs">
      <include name="commons-dbcp.jar"/>
      <include name="commons-pool.jar"/>
      <include name="groovy-all-1.6.4.jar"/>
      <include name="ws-commons-util-1.0.2.jar"/>
      <include name="xmlrpc-client-3.1.2.jar"/>
      <include name="xmlrpc-common-3.1.2.jar"/>
      <include name="xmlrpc-server-3.1.2.jar"/>
    </fileset>
  </path>
  
  <!-- Doxygen path -->
  <path id="doxygen.classpath">
    <fileset dir="${lib.dir}/doxygen">
      <include name="*.jar"/>
    </fileset>
  </path>
	
<!-- separate target for dependency check -->
<target name="dep-check">
    <available file="${baltrad.db.path}/share/baltrad-bdb/java/baltrad-bdb-client.jar" 
             property="baltrad-bdb-client.jar.available" />
    <available file="${beast.path}/bin/beast.jar" property="beast.jar.available" />
    <available file="${beast.path}/libs" type="dir" property="beast.libs.available" />
    <available file="${javahdf.path}/lib/jhdf5.jar" property="javahdf.lib.available"/>

    <fail unless="baltrad-bdb-client.jar.available" 
            message="baltrad.db.path must specify the installation dir of baltrad-db" />
    <fail unless="beast.jar.available" 
            message="beast.path must specify the installation dir of beast" />
    <fail unless="beast.libs.available" 
            message="beast.path must specify the installation dir of beast" />
    <fail unless="javahdf.lib.available" 
            message="javahdf.path must specify the installation dir of hdf-java" />   
</target>        

<target name="init" depends="dep-check">
    <!-- create directory structure -->
    <delete dir="${build.dir}"/>
    <mkdir dir="${build.web.dir}"/>
    <mkdir dir="${build.metainf.dir}"/>
    <mkdir dir="${build.webinf.dir}"/>
    <mkdir dir="${build.jsp.dir}"/>
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${build.lib.dir}"/>
    <delete dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}"/>
    
    <!-- copy libraries -->
    <copy todir="${build.lib.dir}">
      <fileset dir="lib/dom4j">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/jakarta-commons">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/jcip">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/gson">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/keyczar">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/spring">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/log4j">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/slf4j">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/j2ee">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/jakarta-taglibs">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/javassist">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/antlr">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/catalina-ant">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/proj4">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/commons-validator">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/commons-codec">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/commons-lang">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib">
        <include name="postgresql-8.4-701.jdbc4.jar"/> 
        <include name="apache-mime4j-0.6.jar"/>
      </fileset>
      <!-- Also, include neccesary libs from beast-lib -->
      <fileset dir="${beast.path}/libs">
        <include name="bcprov-jdk16-146.jar"/>
        <include name="cglib-nodep-2.2.jar"/>
        <include name="commons-dbcp.jar"/>
        <include name="commons-pool.jar"/>
        <include name="commons-net-2.2.jar"/>
	<include name="httpclient-4.1.2.jar"/>
	<include name="httpclient-cache-4.1.2.jar"/>
	<include name="httpcore-4.1.2.jar"/>
	<include name="httpmime-4.1.2.jar"/>
        <include name="groovy-all-1.6.4.jar"/>
        <include name="jackson-core-lgpl-1.8.2.jar"/>
        <include name="jackson-mapper-lgpl-1.8.2.jar"/>
        <include name="quartz-1.8.3.jar"/>
        <include name="sshj-0.3.1.jar"/>
        <include name="ws-commons-util-1.0.2.jar"/>
        <include name="xmlrpc-client-3.1.2.jar"/>
        <include name="xmlrpc-common-3.1.2.jar"/>
        <include name="xmlrpc-server-3.1.2.jar"/>
      </fileset>
      <fileset dir="${beast.path}/bin">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${baltrad.db.path}/share/baltrad-bdb/java/libs">
        <include name="commons-lang3-3.1.jar"/>
	<include name="joda-time-2.0.jar"/>
      </fileset>
      <fileset dir="${baltrad.db.path}/share/baltrad-bdb/java/">
        <include name="*.jar"/>
      </fileset>
    </copy>

    <!-- copy web interface files -->
    <copy todir="${build.web.dir}">
      <fileset dir="${web.dir}">
        <include name="index.jsp"/>
        <include name="includes/**/*.jsp" />
        <include name="includes/**/*.js" />
        <include name="includes/**/*.css" />
        <include name="includes/**/*.png" />
        <include name="includes/**/*.gif" />
        <include name="includes/**/*.jpg" />
        <include name="includes/**/*.txt" />
        <include name="includes/**/*.xml" />
      	<include name="help/**/*.html" />
      </fileset>
      <fileset dir="${etc.dir}">
        <include name="db.properties" />
        <include name="dex.log4j.properties" />
        <include name="dex.properties" />
      </fileset>
    </copy>

    <!-- copy manifest and context definition files -->
    <copy todir="${build.metainf.dir}">
      <fileset dir="${src.dir}/conf">
        <include name="MANIFEST.MF"/>
      </fileset>
      <fileset dir="${web.dir}/META-INF">
        <include name="context.xml"/>
      </fileset>
    </copy>

    <!-- copy configuration files -->
    <copy todir="${build.webinf.dir}">
      <fileset dir="${webinf.dir}">
        <include name="applicationContext.xml" />
        <include name="authenticationContext.xml" />
        <include name="baltraddex-servlet.xml" />
        <include name="web.xml" />
        <include name="bdb.xml" />
        <include name="jsp/**/*.jsp" />
        <include name="tags/**/*.tag" />
        <include name="**/*.tld" />
      </fileset>
    </copy>

    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}/java">
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
        <include name="**/*.txt"/>
      </fileset>
    </copy>

    <!-- First copy the dex version of the beast-log-messages.xml and the odim_quantities.xml into the classpath -->
    <copy todir="${build.classes.dir}">
      <fileset dir="${etc.dir}">
        <include name="beast-log-messages.xml" />
      	<include name="odim_quantities.xml" />
      </fileset>
    </copy>
  	
    <!-- But since the beast version might contain changes, we preferrably use that one instead -->
    <copy todir="${build.classes.dir}" overwrite="true">
      <fileset dir="${beast.path}/etc"> 
    	<include name="beast-log-messages.xml"/>
    	<include name="odim_quantities.xml"/>
      </fileset>
    </copy>
</target>

  <!-- compile source files -->
  <target name="compile" depends="init">
    <javac encoding="8859_1" srcdir="${src.dir}" deprecation="on"
           destdir="${build.classes.dir}"
	   debug="${compile.debug}" 
           includeAntRuntime="${compile.includeAntRuntime}">
      <include name="**/*.java"/>
      <classpath refid="lib.path"/>
      <classpath refid="dep.lib.path"/>
    </javac>
  </target>

  <!-- installs BaltradDex as library -->
  <target name="install" depends="dist">
    <mkdir dir="${install.prefix}/BaltradDex"/>
    <mkdir dir="${install.prefix}/BaltradDex/sql"/>
    <mkdir dir="${install.prefix}/BaltradDex/bin"/>
    <copy todir="${install.prefix}/BaltradDex/sql">
      <fileset dir="${etc.dir}">
        <include name="**/*.sql"/>
      </fileset>
    </copy>
    <copy todir="${install.prefix}/BaltradDex/bin">
      <fileset dir="${dist.dir}">
        <include name="BaltradDex.war"/>
      </fileset>
    </copy>
  </target>

  <!-- create WAR file -->
  <target name="dist" depends="compile">
    <war destfile="${dist.dir}/BaltradDex.war" webxml="${webinf.dir}/web.xml">
      <fileset dir="${build.web.dir}">
        <include name="**/*.*"/>
        <exclude name="**/web.xml"/>
      </fileset>
    </war>
  </target>
  
  <!-- Create keystore. Additional task used mainly for development -->
  <target name="init-keystore">
    <chmod file="${script.dir}/init-keyczar-keystore.sh" perm="755"/>
    <exec executable="${script.dir}/init-keyczar-keystore.sh">
        <arg value="${keystore.directory}"/>
        <arg value="${hostname}"/>    
    </exec>
  </target>

  <!-- UNIT TEST PART -->
  
  <target name="init.test">
    <mkdir dir="${build.test.dir}"/>
    <mkdir dir="${test.conf.dir}"/>
    <copy file="${etc.dir}/testdb.properties" todir="${build.classes.dir}"/>
    <copy file="${etc.dir}/develop.properties" todir="${build.classes.dir}"/> 
    <chmod file="${script.dir}/init-keyczar-keystore.sh" perm="755"/>
    <exec executable="${script.dir}/init-keyczar-keystore.sh">
        <arg value="${build.test.dir}/${keystore.dir}"/>
        <arg value="${hostname}"/>    
    </exec>
  </target>
  <target name="compile.test" depends="init.test">
    <javac srcdir="${root.dir}/test"
           encoding="8859_1"
           deprecation="on"
           debug="${compile.debug}"
           includeAntRuntime="${compile.includeAntRuntime}"    	
           optimize="${compile.optimize}"
           destdir="${build.test.dir}">
      <classpath location="${build.classes.dir}"/>
      <classpath refid="lib.path"/>
      <classpath refid="dep.lib.path"/>
      <classpath refid="test.lib.path"/>
    </javac>
  	
    <!-- copy any resources -->
    <copy todir="${build.test.dir}">
      <fileset dir="${root.dir}/test">
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
      	<include name="**/*.groovy"/>
        <include name="**/*.h5"/>
      </fileset>
    </copy>
    <copy todir="${test.conf.dir}">
      <fileset dir="${etc.dir}">
        <include name="dex.properties"/>
      </fileset>
    </copy>
    <copy todir="${test.conf.dir}">
      <fileset dir="${include.dir}">
        <include name="color_palette.txt"/>
      </fileset>
    </copy>
  </target>

  <target name="execute.test" depends="compile.test">
	<mkdir dir="${dist.dir}/junit-reports" />
	<junit dir="${build.test.dir}" showoutput="true" forkmode="perBatch" 
               printsummary="no" >
	  <jvmarg line="-Djava.awt.headless=true -Xmx512m -XX:MaxPermSize=512m"/>
	  <formatter type="xml"/> 
	  <formatter type="brief" usefile="false" if="test.format.brief" />
	  <classpath refid="test.lib.path"/>
	  <classpath location="${build.classes.dir}"/>
	  <classpath refid="lib.path"/>
      <classpath refid="dep.lib.path"/>
	  <classpath location="${build.test.dir}" />
	  <batchtest fork="yes" todir="${dist.dir}/junit-reports">
	    <fileset dir="${build.test.dir}" includes="**/*Test.class"/>
	  </batchtest>
	</junit>
  </target>
  
  <target name="test" depends="compile,execute.test"/>
  
  <!-- 
      INTEGRATION TEST PART 
  -->
  <!-- Compile source files -->
  <target name="compile.itest">
    <mkdir dir="${build.itest.dir}"/>
    <javac srcdir="${root.dir}/itest" encoding="UTF-8" deprecation="on"
           debug="${compile.debug}" 
           includeAntRuntime="${compile.includeAntRuntime}"    	
           optimize="${compile.optimize}" destdir="${build.itest.dir}">
      <classpath location="${build.classes.dir}"/>
      <classpath refid="lib.path"/>
      <classpath refid="dep.lib.path"/>
      <classpath refid="test.lib.path"/>
    </javac>
    <!-- copy any resources -->
    <copy todir="${build.itest.dir}">
      <fileset dir="${root.dir}/itest">
        <include name="**/testdata/**"/>
        <include name="**/*.xml"/>
        <include name="**/*.h5"/>
      </fileset>
    </copy>
  </target>
  <!-- Setup integration tests -->
  <target name="init.itest" depends="create.testdb">
	<mkdir dir="${dist.dir}/junit-reports" />
	<copy file="${etc.dir}/testdb.properties" todir="${build.classes.dir}"/>
  </target>
  <!-- Create test database -->
  <target name="create.testdb">
    <sql classpath="${lib.dir}/${itest.bdb.jar}"
         driver="${itest.bdb.driver}"
         url="${itest.bdb.uri}"
         userid="${itest.bdb.user}" 
         password="${itest.bdb.pwd}"
         escapeprocessing="false"
         expandproperties="false"
         delimitertype="row">
      <transaction src="${etc.dir}/drop_dex_schema.sql"/>
      <transaction src="${etc.dir}/create_dex_schema.sql"/>
      <transaction src="${beast.path}/sql/drop_db.sql"/>
      <transaction src="${beast.path}/sql/create_db.sql"/>
    </sql>
  </target>
  <!-- Start baltrad-bdb server -->
  <target name="start-bdb-server">
    <chmod file="${script.dir}/start-bdb-server.sh" perm="755"/>
    <exec executable="${script.dir}/start-bdb-server.sh">
      <arg value="${bltnode.install.prefix}"/>  
      <arg value="${basedir}/${etc.dir}/testdb.properties"/>
      <arg value="${basedir}/${build.itest.dir}/baltrad-bdb-server.pid"/>
      <arg value="${basedir}/${build.itest.dir}/baltrad-bdb-server.log"/>
      <arg value="${baltrad.bdb.server.uri}"/>
      <arg value="${bdb.sources.file}"/>
    </exec> 
  </target>
  <!-- Stop baltrad-bdb server -->
  <target name="stop-bdb-server">
    <chmod file="${script.dir}/stop-bdb-server.sh" perm="755"/>
    <exec executable="${script.dir}/stop-bdb-server.sh">
      <arg value="${basedir}/${build.itest.dir}/baltrad-bdb-server.pid"/>
    </exec> 
  </target>   
  <!-- Execute integration tests -->
  <target name="execute-itest" depends="dist,compile.itest,init.itest,
                                        start-bdb-server">
    <mkdir dir="${dist.dir}/junit-reports" />
    <junit dir="${build.itest.dir}" showoutput="true" forkmode="perBatch" 
           printsummary="no" >
      <jvmarg line="-Djava.awt.headless=true -Xmx512m -XX:MaxPermSize=512m"/>
      <formatter type="xml"/> 
      <formatter type="brief" usefile="false" if="test.format.brief" />
      <classpath refid="test.lib.path"/>
      <classpath location="${build.classes.dir}"/>
      <classpath refid="lib.path"/>
      <classpath refid="dep.lib.path"/>
      <classpath location="${build.itest.dir}" />
      <batchtest fork="yes" todir="${dist.dir}/junit-reports">
        <fileset dir="${build.itest.dir}" includes="**/*Test.class"/>
      </batchtest>
    </junit>
    <!-- Stop bdb server once the tests are finished -->
    <antcall target="stop-bdb-server"/>
  </target>
    
  <!-- CLEAN -->
  <target name="clean">
    <delete dir="build"/>
    <delete>
      <fileset dir=".">
        <include name="**/*.bak"/>
        <include name="**/*~"/>
      </fileset>
    </delete>
    <delete dir="dist" />
    <delete>
      <fileset dir=".">
        <include name="**/*.war" />
      </fileset>
    </delete>
    <delete dir="${doc.build.dir}"/>
  </target>

  <!-- create database and users -->
  <target name="create-db">
    <sql classpath="${lib.dir}/${db.jar}" driver="${db.driver}" url="${db.url}"
         userid="${db.user}" password="${db.pwd}">
      <transaction src="${etc.dir}/create_db.sql"/>
    </sql>
  </target>

  <!-- create database schema -->
  <target name="create-schema">
    <sql classpath="${lib.dir}/${db.jar}"
         driver="${db.driver}"
         url="${db.url}"
         userid="${db.user}" 
         password="${db.pwd}"
         escapeprocessing="false"
         expandproperties="false"
         delimitertype="row">
      <transaction src="${etc.dir}/create_dex_schema.sql"/>
    </sql>
  </target>

  <!-- insert data into the database -->
  <target name="insert-data" depends="create-schema">
    <sql classpath="${lib.dir}/${db.jar}"
         driver="${db.driver}"
         url="${db.url}"
         userid="${db.user}" 
         password="${db.pwd}" >
    <transaction src="${etc.dir}/insert_dex_data.sql"/>
    </sql>
  </target>

  <!-- installs the full data scheme used by dex, db and beast -->
  <target name="create-full-schema" description="Installs all schemes necessary">
    <sql classpath="${lib.dir}/${db.jar}"
         driver="${db.driver}"
         url="${db.url}"
         userid="${db.user}" 
         password="${db.pwd}"
         escapeprocessing="false"
         expandproperties="false"
         delimitertype="row">
      <transaction src="${etc.dir}/drop_dex_schema.sql"/>
      <transaction src="${baltrad.db.path}/share/baltrad-db/sql/postgresql/drop.sql"/>
      <transaction src="${baltrad.db.path}/share/baltrad-db/sql/postgresql/create.sql"/>
      <transaction src="${baltrad.db.path}/share/baltrad-db/sql/postgresql/data.sql"/>
      <transaction src="${beast.path}/sql/drop_db.sql"/>
      <transaction src="${beast.path}/sql/create_db.sql"/>
      <transaction src="${etc.dir}/create_dex_schema.sql"/>
    </sql>
  </target>
  
  <!-- deploy on tomcat -->  
  <target name="deploy" depends="dist, insert-data, context-status"
    	  if="context.deployable">
    <echo message="Deploying ${mgr.path} to ${mgr.url}"/>
    <deploy url="${mgr.url}"
            username="${mgr.username}"
            password="${mgr.password}"
            path="${mgr.path}"
            update="${mgr.update}"
            war="file:${dist.dir}/BaltradDex.war"/>
  </target>

  <target name="hudson" depends="compile,prepare-testdb,execute.test"/>

  <target name="prepare-testdb">
    <sql classpath="${lib.dir}/${db.jar}"
         driver="${db.driver}"
         url="${db.url}"
         userid="${db.user}"
         password="${db.pwd}"
         escapeprocessing="false"
         expandproperties="false"
         delimitertype="row">
      <transaction src="${etc.dir}/drop_dex_schema.sql"/>
      <transaction src="${etc.dir}/create_dex_schema.sql"/>
    </sql>
  </target>

  <!-- From apache-tomcat user manual for using the ant-manager task -->
  <target name="context-status">
    <property name="running" value="${mgr.path}:running"/>
    <property name="stopped" value="${mgr.path}:stopped"/>
    <list url="${mgr.url}"
      		outputproperty="ctx.status"
      		username="${mgr.username}"
      		password="${mgr.password}">
    </list>
    <condition property="context.running">
      <contains string="${ctx.status}" substring="${running}"/>
    </condition>
    <condition property="context.stopped">
      <contains string="${ctx.status}" substring="${stopped}"/>
    </condition>
    <condition property="context.notInstalled">
      <and>
        <isfalse value="${context.running}"/>
        <isfalse value="${context.stopped}"/>
      </and>
    </condition>
    <condition property="context.deployable">
      <or>
        <istrue value="${context.notInstalled}"/>
        <and>
          <istrue value="${context.running}"/>
          <istrue value="${mgr.update}"/>
        </and>
        <and>
          <istrue value="${context.stopped}"/>
          <istrue value="${mgr.update}"/>
        </and>
      </or>
    </condition>
    <condition property="context.undeployable">
      <or>
        <istrue value="${context.running}"/>
        <istrue value="${context.stopped}"/>
      </or>
    </condition>
  </target>
  
    <!-- Test deployment -->
    <target name="test-deploy" depends="dist, test-context-status"
            if="test.context.deployable">
        <echo message="Deploying ${test.mgr.path} to ${test.mgr.url}"/>
        <deploy url="${test.mgr.url}"
                username="${test.mgr.username}"
                password="${test.mgr.password}"
                path="${test.mgr.path}"
                update="${test.mgr.update}"
                war="file:${dist.dir}/BaltradDex.war"/>
    </target>
    <!-- Test context status -->
    <target name="test-context-status">
        <property name="running" value="${test.mgr.path}:running"/>
        <property name="stopped" value="${test.mgr.path}:stopped"/>
        <list url="${test.mgr.url}"
      		outputproperty="ctx.status"
      		username="${test.mgr.username}"
      		password="${test.mgr.password}">
        </list>
        <condition property="context.running">
            <contains string="${ctx.status}" substring="${running}"/>
        </condition>
        <condition property="context.stopped">
            <contains string="${ctx.status}" substring="${stopped}"/>
        </condition>
        <condition property="context.notInstalled">
            <and>
                <isfalse value="${context.running}"/>
                <isfalse value="${context.stopped}"/>
            </and>
        </condition>
        <condition property="test.context.deployable">
            <or>
                <istrue value="${context.notInstalled}"/>
                <and>
                    <istrue value="${context.running}"/>
                    <istrue value="${test.mgr.update}"/>
                </and>
                <and>
                    <istrue value="${context.stopped}"/>
                    <istrue value="${test.mgr.update}"/>
                </and>
            </or>
        </condition>
        <condition property="test.context.undeployable">
            <or>
                <istrue value="${context.running}"/>
                <istrue value="${context.stopped}"/>
            </or>
        </condition>
    </target>
    
    
    <!-- Generate source code documentation -->
    <target name="doc" description="Generates source code documentation">
        <taskdef name="doxygen"  classname="org.doxygen.tools.DoxygenTask" 
                 classpathref="doxygen.classpath"/>
        <mkdir dir="${doxygen.dir}"/>
        <mkdir dir="${javadoc.dir}"/>
        <doxygen configFilename="${basedir}/doxygen/dex_doxygen.cfg"/>
        <javadoc packagenames="eu.baltrad.*" 
                 sourcepath="${src.dir}"
                 destdir="${javadoc.dir}"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="${app.name} API">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>          
            <doctitle><![CDATA[<h1>${app.name} API</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright 2009 - 2012 Institute of Meteorology 
                    and Water Management</i>]]></bottom>
            <classpath refid="lib.path"/>         
        </javadoc>
        <echo message="Doxygen documentation created in ${doxygen.dir}"/>
        <echo message="Javadoc documentation created in ${javadoc.dir}"/>
    </target>
</project>

