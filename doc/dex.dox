/**
\mainpage BaltradDex documentation

\date July 2, 2013 
\author Maciej Szewczykowski | maciej@baltrad.eu
\version 1.7
\par Copyright
2012 &copy; Institute of Meteorology and Water Management, Warsaw, Poland

- \subpage intro

	-# \ref legal
	-# \ref about
	-# \ref structure
	-# \ref gendocs

- \subpage install

	-# \ref prereq
	-# \ref prep
		-# \ref prep_db
		-# \ref prep_tomcat
			-# \ref prep_tomcat_keystore
			-# \ref prep_tomcat_connectors
			-# \ref prep_tomcat_admin_account
		-# \ref prep_app_context
	-# \ref build_dex
	-# \ref test_dex

- \subpage running

	-# \ref start
	-# \ref login
	-# \ref change_password 
	-# \ref quick_setup 
		-# \ref quick_node_settings
		-# \ref quick_radars
 		-# \ref quick_data_sources 
		-# \ref quick_keys
	-# \ref conn
	-# \ref subscribe
	-# \ref node_status
	-# \ref registry
	-# \ref log
	-# \ref sticky_messages
	-# \ref more_data_sources
	-# \ref data_browse
	-# \ref data_processing 
	-# \ref admin
		-# \ref radars
		-# \ref data_sources
		-# \ref subscription_settings
		-# \ref registry_settings
		-# \ref messages_settings
		-# \ref accounts	
		-# \ref node_settings
	-# \ref supervisor
		-# \ref supervisor_overview
		-# \ref supervisor_admin
		-# \ref supervisor_qinterface
		-# \ref supervisor_returncodes
		-# \ref supervisor_formatting
		-# \ref supervisor_reporters
		-# \ref supervisor_reporters_db_status
		-# \ref supervisor_reporters_bdb_status
		-# \ref supervisor_reporters_bdb_args
		-# \ref supervisor_reporters_radar_connection_status
		-# \ref supervisor_reporters_bdb_object_status
		

- \subpage trouble

- \subpage exchange_format

	-# \ref exchange_general
	-# \ref exchange_auth 
		-# \ref exchange_hdr
		-# \ref exchange_sign
	-# \ref exchange_datasource_listing
	-# \ref exchange_start_subscription
	-# \ref exchange_update_subscription
	-# \ref exchange_post_key
	-# \ref exchange_post_file
	-# \ref exchange_post_message


- \subpage support 


\page intro Introduction


\section legal Legal notice
\par
BALTRAD Data Exchange System (BaltradDex) is free software: you can redistribute 
it and/or modify it under the terms of the GNU Lesser General Public License 
as published by the Free Software Foundation, either version 3 of the License, 
or (at your option) any later version.

\par
BaltradDex is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

\par
You should have received a copy of the GNU Lesser General Public License
along with BaltradDex.  If not, see http://www.gnu.org/licenses/.
By obtaining, using, and/or copying this software and/or its associated 
documentation, you agree that you have read, understood, and will comply
with the following terms and conditions:

\section about About
\par
BaltradDex is a part of the BALTRAD project, allowing to establish connections 
between BALTRAD nodes, access and subscribe data sources available on a given 
node as well as to receive and send radar data. BaltradDex also provides 
a web interface allowing for integrated access to other system components.    

\section structure Project structure
\par
Project directory tree consists of the following:

- \b doc contains project documentation
- \b doxygen contains Doxygen configuration file
- \b etc contains configuration files
- \b extralib contains additional libraries
- \b itest contains integration tests
- \b lib contains libraries  
- \b script contains executable shell scripts
- \b src contains source code files
- \b test contains tests
- \b tools contains additional executables
- \b web contains web interface files

\section gendocs Generating documentation

In order to generate documentation, call the following ant task from 
build.xml script:

\code
$ cd BaltradDex
$ ant doc
\endcode

Documentation will be stored in dox/build directory. This manual will be 
available under \p doxygen directory, whereas javadoc source code documentation 
will be available in \p javadoc folder.  



\page install Installation



\attention 
\n
Baltrad Data Exchange System (BaltradDex) constitutes an integral part of 
baltrad node software package. As such, it provides full functionality only
if installed with node-installer utility. However it is possible to deploy 
BaltradDex provided that the following BALTRAD software components are 
installed in the system:
\attention
\n
- \b baltrad-db - Baltrad database management system
- \b beast - Baltrad message management and data processing interface
\attention 
\n
Please refer to the documentation of the above packages for installation and
usage instructions.
\attention
\n 
Although the above configuration may work, the functionality it provides will
be limited and the system operation may be unstable. Therefore it should not
be used for operational work. It is strongly recommended to perform full
installation procedure using node-installer utility.

\section prereq Prerequisites

BaltradDex depends on the following software packages:
- <b>Java Development Kit (JDK)</b> - version 1.6.0_20 or later.
- <b>Apache Tomcat</b> - version 6.0.26 or later. BaltradDex is implemented as
Java Web Application. As such, it requires Apache Tomcat JSP and servlet
container to run.
- <b>Apache Ant build tool</b> - version 1.7.1 or later. Build, deployment 
and other tasks are executed and controlled by Apache Ant build tool. 
- <b>PostgreSQL database server</b> - version 8.4 or later. BaltradDex uses 
PostgreSQL database server to store its configuration and runtime parameters.
- <b>HDF Java</b> - HDF5 libraries for Java, version 2.7 or later. HDF Java 
can be either build from sources or installed as precompiled binaries. 
For detailed information and download go to:
http://www.hdfgroup.org/hdf-java-html/ 

\attention
\n
BaltradDex makes reference to libraries provided by baltrad-db and beast
components. Make sure the above software packages are installed on your system 
and that suitable libraries are available before installing BaltradDex.

\section prep Preparation

\subsection prep_db Create database 
Before installing the software, you have to create a dedicated database and 
user in the PostgreSQL server. It can be achieved using psql client 
or pgAdmin administrative tool as well.

With psql client, use the following commands:

\code
$ su - postgres
$ psql
> CREATE USER baltrad with PASSWORD 'baltrad';
> CREATE DATABASE baltrad with OWNER baltrad;
\endcode

\subsection prep_tomcat Configure Tomcat

\note
Since version 1.7, BaltradDex uses secure communication protocol (HTTPS) for 
encrypting sensitive data (e.g. passwords, user accounts and node settings).
This solution requires opening 2 independent ports for handling standard and 
secure communication between client (browser) and server (BALTRAD node).
The following is a detailed instruction on how to configure your Apache 
Tomcat servlet container to enable secure communication with SSL. Please 
refer to <a href="http://tomcat.apache.org/tomcat-4.0-doc/ssl-howto.html">
Apache Tomcat documentation</a> for more information about how to configure 
SSL on Tomcat.
\endnote

\subsubsection prep_tomcat_keystore Prepare certificate keystore

To create a new keystore from scratch, containing a single self-signed 
Certificate, execute the following from a terminal command line:

\code
$ %JAVA_HOME%/bin/keytool -genkey -alias tomcat -keyalg RSA 
		-keystore /path/to/my/keystore
\endcode

where \p JAVA_HOME points at your \p JDK installation.

After executing this command, you will first be prompted for the keystore 
password. The default password used by Tomcat is \p changeit (all lower case), 
although you can specify a custom password if you like. 

Next, you will be prompted for general information about this Certificate, 
such as company, contact name, and so on. This information will be displayed 
to users who attempt to access a secure page in your application, so make sure 
that the information provided here matches what they will expect.

Finally, you will be prompted for the key password, which is the password 
specifically for this Certificate (as opposed to any other Certificates stored 
in the same keystore file). You MUST use the same password here as was used for 
the keystore password itself.

\subsubsection prep_tomcat_connectors Configure connectors
  
Application context is configured in a way allowing to automatically switch
between secure and standard communication protocols. Such configuration 
requires to open 2 independent ports for connections between the browser and
the server. In order to do this, edit server.xml configuration file located 
in the following directory:

\code
%CATALINA_HOME%/conf/server.xml
\endcode  

where \p CATALINA_HOME represents the directory into which you installed Tomcat. 

First, configure SSL connector that will handle secure, encrypted connections: 

\code
<Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"
           maxThreads="200" scheme="https" secure="true"
           clientAuth="false" sslProtocol="TLS" URIEncoding="UTF-8"
	       keystoreFile="/path/to/my/keystore/keystore.jks" 
	       keystorePass="s3cret" keystoreAlias="tomcat"/>
\endcode

The \p port attribute (default value is 8443) is the TCP/IP port number on which 
Tomcat will listen for secure connections. You can change this to any port 
number you wish. Assuming that you are upgrading your baltrad-node installation,
you will probably prefer to use the same port number as you have been using for
standard, non-secure communication up to now. Make sure that \p keystoreFile
points at your certificate keystore created in the first step, and that
\p keystorePass matches the password set for the keystore.  

Next, configure the non-SSL connector that will handle standard (non-secure)
connections. Please note that the \p redirectPort attribute must match the port 
number configured in SSL connector. Also, make sure that different port numbers 
are configured for standard and SSL connectors.
 
\code
<Connector port="8084" protocol="HTTP/1.1" connectionTimeout="20000"
           redirectPort="8443" URIEncoding="UTF-8" />
\endcode  

\subsubsection prep_tomcat_admin_account Configure administrative account

Once Tomcat servlet container is installed, remember to configure
administrative account to be used at the deployment stage. Edit 
\p tomcat-users.xml file located in \p TOMCAT_DIR/conf so it looks 
like the following:

\code
<?xml version='1.0' encoding='utf-8'?>
<tomcat-users>
    <role rolename="tomcat"/>
    <role rolename="manager"/>
    <user password="tomcat" roles="tomcat" username="tomcat"/>
    <user password="tomcat" roles="role1" username="role1"/>
    <user password="s3cret" roles="manager,admin" username="manager"/>
</tomcat-users>
\endcode

\note 
At this step it is necessary to restart Tomcat servlet container for the 
configuration changes to take effect.
\endnote 

\subsection prep_app_context Configure application context

In order to complete security settings, it is necessary to edit application
context definition file:

\code
web/WEB-INF/applicationContext.xml
\endcode 

There is port mapping section located at the top of the file inside 
\p <security:http> tag. Enter port number for secure and standard connections 
matching Tomcat connectors configured in the previous as follows:

\code
<security:http auto-config="true" access-denied-page="/login.htm"> 
        <security:port-mappings>
            <security:port-mapping http="8084" https="8443"/>
        </security:port-mappings> 
        ...
</security:http>        
\endcode

\section build_dex Build & install BaltradDex 

The first step of installation is creating necessary database schema. 
This is achieved by executing the following build script task:

\code
$ cd BaltradDex
$ ant create-full-schema
\endcode

Next step is preparing a keystore to be used with application. The keystore
is used to authenticate requests during node-to-node communication. In order 
to do this, edit some properties in \p etc/dex.properties file:

- \p node.name - the name of your BALTRAD node, e.g. test.baltrad.eu
- \p keystore.directory - the directory where keystore will be created

Next, call the following build script task:

\code
$ cd BaltradDex
$ ant init-keystore
\endcode

To build and deploy BaltradDex application on Tomcat server:

\code
$ cd BaltradDex
$ ant deploy
\endcode

\attention
\n
At this stage it may be necessary to modify appserver.properties file located in
BaltradDex/etc folder. Note that user's name and password for Tomcat user have
to match your setup in tomcat-users.xml.

\section test_dex Testing

To run unit tests, execute the following ant task:

\code
$ cd BaltradDex
$ ant test
\endcode

To run integration tests, execute the following ant task:

\code
$ cd BaltradDex
$ ant execute-itest
\endcode

\attention
\n
Integration tests require that baltrad-db and beast software packages are 
installed in your system.


\page running Running BaltradDex


\section start Starting BaltradDex
Assuming that your Tomcat server is installed on local machine and listening 
on port 8084, in order to run the application, open a web browser and type 
the following in the address bar:

\code
http://localhost:8443/
\endcode

\attention
BaltradDex was tested with the following browsers: Firefox, Opera, 
Google Chrome and Konqueror. Usage of Internet Explorer is currently not 
supported.
Because we are using self-signed certificates, your browser will warn you about
untrusted connection and ask you if you want to add a security exception. 
Confirm security exception to access BaltradDex login page.   

\section login Login/Logout

Sign in typing your user name and password in the textbox available on the 
login screen. During installation, default administrator's account is created 
with user name \p admin and password \p baltrad.

\attention
It is absolutely crucial that you change administrator's password immediately 
after signing in for the first time. Refer to \ref accounts section for details.  

In order to sign out, use \p Logout link available in the upper 
right corner of each page.  

\note 
For security reasons, it is important that user signs out each time after 
work session is over. The following message on the login page confirms that user
credentials have been successfully removed from HTTP session.      
\n
\n
\image html logout.png
\endnote

\section change_password Change user's password

It is important for the user to change the default password set by system 
administrator. In order to change the password, click \p Password option located 
in \p Settings group of the left-column menu. User will be presented with a page 
allowing to modify the password.

\image html change_user_password.png

Enter new password, confirm it by typing the password again and click \p Save.
System will display a message confirming that password has been changed. 
From now on new password will be used in order to sign in.

\image html change_user_password_status.png

\attention
For security reasons, it is strongly recommended that user changes the password 
as soon as possible, preferably after signing in for the first time.

\section quick_setup Quick setup

In order to configure a fully functional system ready to exchange data, several 
things have to be done.

\subsection quick_node_settings Node settings

First thing to do is to configure node properties. Since setting node properties
require administrative privileges, it is necessary to sign in as user \p admin.
Once signed in, click <tt>Node settings</tt> option from left-column menu. 

\image html node_properties.png

The most important settings are <tt>Node name</tt> and <tt>Node address</tt>. 
Make sure that these settings are correct before configuring data exchange.

\attention
Make sure that <tt>Node name</tt> setting always matches the name of
localhosts's key entry in the keystore. If you have installed BaltradDex 
software  with node-installer package, your node name was specified on 
installation stage and it should remain unchanged. In case of installing 
BaltradDex as standalone module, proceed according to the instructions given 
in \ref build_dex.

\subsection quick_radars Radars

BaltradDex provides radar interface which allows to access data from  a given
radar station. Radar interface is not used directly - it is selected as a 
basic parameter of data source (see the next section). In order to configure 
radar, click <tt>Radars</tt> item in the main menu. Menu will expand showing
available options. Click \p Add option. Next, select desired center from the 
list on the left by clicking on the center identifier. Identifiers have the 
following form: Country code - GTS code - center number. Once clicked, the box 
on the right reveals the list of radar stations available for a given center. 
Radar station names are presented in the following form: Place - radar code - 
WMO number. Click \p Save button to save radar configuration. 

\image html save_radar.png

\note
Use \p Show option from \p Radars menu to display the list of currently 
configured radar stations. \p Remove option will delete selected radars.
\endnote

\subsection quick_data_sources Data sources  

Next step is configuration of data sources. Data source is an interface
allowing to access data injected into baltrad node from local production 
system. Data available with a given data source must exactly match its 
parameters. 
\n Click <tt>Data Sources</tt> option in the main menu and \p Add.
At the top of the page, fill in the textboxes providing a significant data 
source name and description like in the example given below. Typically, data
sources are named after radars, including some additional parameters, like 
data type in the example below. 

\image html data_source_name.png

Next scroll down to radar selection box. General rule for setting data source
parameters is to add parameters from left options box to the right. Select a
parameter in the left options box, then use button marked with \p > sign in 
order to add the parameter to the options box in the right. Use \p < button to
remove unwanted parameter. Select one or more radars according to your needs. 
Typically only one radar is selected for a data source, but more radars is 
still possible. Remember that data files coming from these radars will be 
available with this data source.  
\note
At least one radar is required. In case of an attempt to save data source 
without selected radar, user will be warned with a relevant message.  
\endnote

\image html data_source_radar.png

Scroll the page down. Next step is selection of file object according to ODIM_H5 
model specification. Select file object from the left options box and use \p >
button in order to add it to selected options box, just like in the previous 
step. It is possible to select more than one file object. In such case all 
selected objects will be available with this data source.  

\image html data_source_file_object.png

\note
Move mouse cursor over a selected option to get detailed file object description 
displayed as tooltip. 
\endnote

Scroll the page to the bottom. Last step of data source configuration is 
selection of users for which this data source will be available. This means 
that users selected at this stage will be able to subscribe the data source and 
will receive data matching its parameters defined in the previous steps. 
\note
The desired user account might not be available in the system at the stage 
of data source configuration. This is because user accounts with role \p peer
(typically used for data exchange) are created automatically upon first 
incoming connection. It is possible however to configure data source with no 
user accounts assigned and add given account as soon as it is created.   
\endnote 

\image html data_source_user.png

Once the above steps are completed, press \p Save to store data source 
configuration. User will be redirected to status page indicating whether saving
of data source was successful. Clicking \p OK in the status page will take user 
to data source selection page.

\image html data_source_summary.png

\note
Use \p Edit and \p Remove options available in <tt>Data sources</tt> menu in 
order to modify data source parameters or delete data source from the system.
Note that in case when name of existing data source is modified, it will
be saved as a new data source.      
\endnote 

\subsection quick_keys Key exchange

Each message exchanged within BALTRAD network is authenticated. For the process
of authentication, private/public key pair is used. Outgoing message is signed
with node's private key and incoming message is verified and authenticated 
with public key. According to this approach, local node's public key has to be 
available in the peer node's keystore. Therefore, before connecting to peer
node, local node's public key has to available in peer node's keystore. 
In order to send your public key to the peer node, click \p Connect option 
located in the \p Exchange group in the main menu. Type peer node's URL address 
in the edit box and click <tt>Send key</tt> button. 

\image html post_key_address.png

In case the key was successfully sent to the peer node, user will be informed 
with the following message:

\image html post_key_success_msg.png

In case when the key already exists in the peer node's keystore (e.g. has 
already been sent earlier), the following message is shown:

\image html post_key_exists_msg.png

Once local key has been sent to the peer node, peer node's administrator has 
to approve a given key. In order to access the keystore, node's admin clicks 
\p Keystore option from the \p Settings group in the menu. Keystore content 
will be presented as in the image below.  

\image html keystore_mgmt.png

\note
Key's authenticity is verified automatically by the receiving node. 
Authentication consists in comparison of key's checksum sent along with the key 
itself against the checksum calculated by the receiving node. In case the 
checksums differ (e.g. in case of content substitution), the key will be 
rejected.  
\endnote

Once the key has arrived, next thing is granting access for this key. 
In the following example, \p dev.baltrad.imgw.pl is the incoming key, while
<tt>baltrad2.imgw.pl</tt> is local node's public key. 

\note
For security reasons, local node's key can't be modified or removed. Local key 
is always marked with blue buttons.
\endnote      

To grant access for the selected key, click \p Access button next to given key 
entry. Red icon turn blue, indicating that access for the given key has been 
granted.

\image html keystore_grant.png

From now on the system will let throught every incoming message that can be 
successfully verified with this key.
 
In order to revoke access, click on the same icon once again. It will turn red
again and access for the selected key will be revoked.

Keystore management page allows to remove peer's key permanently. To remove 
selected key click \p Delete icon next to given key entry. Once clicked, icon 
reveals dialog asking user to confirm key deletion. Click \p Delete button to 
remove key permanently from the keystore, or \p Cancel button to get leave the 
key in the keystore. 

\image html keystore_delete.png  

\section conn Connecting to peer node

Basic BaltradDex functionality allows to connect to peer node and access and 
subscribe data sources available for a given user. In order to connect, sign in
to BaltradDex, click \p Connect option from \p Exchange group in the main 
menu. Assuming that connection to a given node is made for the first time,
type node address in the text box <tt>Enter URL address</tt> according 
to the example below.   

\image html connect_address.png

\note
Make sure to type address in the correct format: 
\n
\n
<tt>http://server.name.org:[port number]</tt>
\n
\n
If incorrect address is specified, system will issue a following message:

\image html invalid_address.png 
\endnote

Clict \p Connect. Upon successful connection, peer node will render the view
with a list od data sources available for the user to subscribe (see the image
below). In order to subscribe a given data source, click a checkbox next to 
data source name and description. Once selection is made, click \p OK. The
system will ask to confirm the selection by clicking \p OK on the next screen
and submitting subscripions request at the peer node.      

\image html connect_data_sources.png

If subscription request was successfully completed, user is presented with the 
following message confirming the operation. Clicking \OK will redirect user
to subscription status page.

\image html connect_success.png

Subscription status page (see image below) allows to access subscription list
on per node basis, that is to access and manage subscriptions at each peer 
node separately. Click peer node name to access subscription management page.
\note
User can access subscription status page at all times by clicking 
\p Subscriptions option from \p Exchange group in the main menu.
\endnote  

\image html peer_subscription.png

After clicking on peer node name, system displays list of data sources 
subscribed at this node. This page allows to modify subscription status by 
activating or cancelling subscription of particular data sources. 
\n
\n
Refer to \ref subscribe section for details.

\image html subscriptions.png

\section subscribe Managing subscriptions

To access subcription management page, click on \p Subscriptions option in
the main menu. Click name of desired peer node to access subscriptions
available at this node. Now it is possible start or cancel subscription of 
a given data source. Simply check or uncheck a corresponding check box and 
click \p OK button.   

\image html subscriptions_selected.png  

Next page shows subcription request that will be sent to the peer node and 
serves as a confirmation. Blue check mark denotes activating subscription, 
whereas red circle means that subscription of a given data source will be cancelled.
Click \p Back to go back to selection page or \p OK to send subscription 
request.

\image html subscriptions_requested.png 

Assuming that the request was successfully posted at the peer node, the system
will display the following message to confirm that subscription status was
modified. Click \p OK to go back to initial subacription status page. 

\image html subscriptions_status.png 

\note
Detailed information on system activity, i.e. node connections, subscription
requests, incoming data etc. can be accessed with message logging interface.  
Refer to \ref log section for details. 
\endnote

\section node_status Checking node status

Node status data is displayed on status page which is available directly after 
user signs in. It is also available by clicking \p Status link in the main menu.
Node status page is divided into 2 sections, containing different type of 
information.  
\n
First section, shown in the image below, presents useful information concerning
the server itself, i.e: node name, software version, operator, number of 
entries in system log and delivery registry, as well as currently available disk 
space. 

\image html node_status_info.png

The second section contains information on data exchange. The information is 
grouped by nodes, which are currently exchanging data with the local node 
(see image below).  

\image html node_status_exchange.png

There are 2 types of data transfer:

\n
- Downloads - data downloaded from the peer nodes. Downloads option shows the 
status of your subscriptions to data sources available on peer nodes.      
\n 
- Uploads - data uploaded to the peer nodes. Upload option allows to access 
information about local data sources subscribed by peer nodes.  

User can check current data transfer status clicking a given node name. This 
reveals 2 items: \p Downloads and \p Uploads (depending on the current data 
exchange status), as shown in the image below.

\image html node_status_transfers.png

Clicking \p Downloads option will display the list of data sources currently
subscribed at the selected peer node. In the example below, clicking 
\p Downloads item shows list of data sources subscribed at \p se.baltrad.eu.    

\image html node_status_downloads.png

Each item on the list contains name of data source, date and and time when 
subscription has started as well as subscription status. If subscription status 
is set to \p Active, it means that local node is currently receiving data from a 
given data source. If subscription is stopped, the status control changes to
\p Off. 

\n
By analogy, clicking \p Uploads item shows list of local data sources subscribed 
by a given peer node, in this case \p se.baltrad.eu, as shown below.   

\image html node_status_uploads.png   
 
Uploads list contains information about data source name, date and time when 
subscription has started, number of successfully uploaded files and upload
failures.


\section registry Data delivery registry

If there are active subscriptions and local node is supplied with data from
local production system, user can check the status of data delivery to the peer    
nodes that subscribed local data sources.
\n
To check data delivery status, click <tt>Delivery registry</tt> link from 
the \p Exchange options group. Delivery registry page is shown in the image 
below.

\image html delivery_registry.png

Each entry in the registry contains timestamp, recipient (user) name, data file 
signature and delivery status (blue check mark denotes delivery success, red
circle - failure). User can navigate through registry entries in a standard way,
using either buttons with page numbers or scroll buttons. 

\section log Message logging

System messages interface allows to access and display detailed information 
on system activity. It is possible to display system messages in two modes. 
First mode allows to update message display automatically. Click \p Messages 
link in <tt>Node status</tt> options group of the main menu. By default, 
system will enter \p live mode, which means that the display will be 
automatically updated each time a new message is logged. Auto-refresh option 
can be turned off and on at all times by clicking \p Auto-update toggle.

\note
There are 3 types of messages - informative messages (displayed on white 
background), warnings (yellow) and errors (light red).
\endnote

\image html latest_messages.png

The second mode allows to access full system log, as well as search for messages
based on selected criteria. Select \p Messages option from the main menu, then 
Click \p Browse link placed in the upper right corner of messages screen. 
Upper part of the page allows to define message search criteria. 
The following options are available:

- Message logger - message logger (software component) that produced the
message. The following loggers are available: \p DEX (data exchange component),
\p BEAST (data processing component) and \p PGF (product generation framework).
- Log level - one of the following message types: informative - INFO, 
warning - \p WARN or error messages - \p ERROR.  
- Start date - starting date of messages' timespan. Click calendar's icon to 
pick start date.
- Start time - starting time of messages' timespan.   
- End date - end date of messages' timespan. Click calendar's icon to pick 
end date.
- End time - end time of messages' timespan.
- Phrase - phrase to look for in message body.     

\image html browse_messages.png

Once search options are set, click \pSelect button. Navigate through pages 
either clicking page numbers of scroll buttons. Click \p > sign to move to 
next page, \p < to move to previous page. Clicking \p << sign will display 
the first page, and \p >> the last page of system log. Use \p Reset button
to reset message search options.

\note
The <tt>Show latest</tt> link in the upper right corner of the page allows 
to return to \p live messages display mode.
\endnote

\section sticky_messages Sticky messages

Sticky messages serve as notification system informing user about events 
that require some kind of interaction. For instance, user is informed about 
receiving public key from a peer node. Since it is up to the user to approve 
or reject the key, they have to be aware that the key has been received and
that it awaits further action. 
\n
First, user is informed that sticky messages have been received. This is 
accomplished with a special message box located in the title bar at the top 
of each page, as shown in the image below.

\image html sticky_message_notification.png 

The message box will remain visible as long as at least one sticky message is
available in the system.
\n
\n
In order access and read messages, click the link given in the message box. The 
system will display sticky messages in a dedicated page as shown below. 

\image html sticky_message_show.png

Sticky message consists of the header containing date and time when the 
message was received and of actual message content. The content may include 
some tips on the further actions that should be taken, as in case of receiving
public key from a peer node.  
\n
\n
Sticky messages should be removed once it is read. To remove a sticky message, 
click \p Delete button next to it. If there are no messages remaining, 
notification box will be no longer visible in the title bar and the system will 
display the following information:

\image html sticky_message_deleted.png

\section more_data_sources More on data sources

Section \ref quick_data_sources showed how to configure and save a data source.
Existing data sources are available with <tt>Data sources</tt> link located in
the main menu in <tt>Node status</tt> group. Image below shows list of data 
sources available in the system. 

\image html data_sources.png 

Data source interface allows to access, browse, display and download data 
files matching its parameters. Click on a given data source name to list the
matching files. Use page numbers and scroll buttons to navigate through pages. 

\image html data_source_files.png      

File listing page provides user with access to detailed file information and 
quick file preview as well as allows to download selected file. User can 
download selected file clicking \p Download link next to the given file entry. 
Browser will display standard file download dialog, allowing to select target 
storage directory. In order to display detailed information about selected file, 
user clicks \p Details option. File details page is consists of 2 sections. 
First section, shown in the image below, contains some basic information about 
data file: file signature, date, time, source ID (ID of the radar station 
that collected the data), storage time and data type (file object type,
according to ODIM_H5 radar data information model).

\image html data_source_file_details_info.png

Next section displays data preview for each dataset contained in the file. 
A thumbnail is generated for each scan and for each data type independently 
(e.g. dBZH, dBZV, VRAD etc.). The example below presents data preview for volume 
file consisting of several scans. Each image representing a single scan is 
associated with information about antenna elevation angle and data type - in 
this case horizontally polarized reflectivity.
\image html data_source_file_details_preview.png

\n
\n
Next feature is full-sized data preview. Click on any image representing 
a single scan. The system will generate full size image based on original 
radar data resolution stored in files's metadata. The image will be 
displayed as an overlay in Google Maps interface, like in the example below.             

\image html data_source_file_image.png

Use \p Opacity slider to adjust radar data layer's opacity and <tt>Toggle
visibility</tt> button to turn radar data layer on and off.

\section data_browse Data browsing and access 

Data browsing interface allows user to browse and access radar data files in 
a flexible way. In order to access file browser interface, click 
<tt>Browse files</tt> link in <tt>Node status</tt> options group of the main 
menu.
\n
\n
There are several parameters available to specify while browsing data. 
The parameters include source radar station, file object type according to 
ODIM_H5 specification and time span. Select radar station and file object type
from the drop-down lists, set dates clicking on calendar icon next to 
<tt>Start date</tt> and <tt>End date</tt> fields. Once parameters are set, 
click \p Select button. Files matching defined criteria will be fetched 
from the database.   

\image html browse_files.png

User navigates through the list of selected files in a standard way, clicking 
page numbers and scroll buttons. File listing can be sorted by date, time,
source and type. I order to sort the list, user clicks on the header of 
selected column, e.g. \p Source.
File listing provides acces to file details page, as described in \ref
more_data_sources section. Click \p Details to access file details and data 
preview page, click \p Download to store file on the local disk.  

\section data_processing Data processing

BaltradDex constitutes interface to data processing functionality. Data 
processing options are grouped in \p Processing tab. Refer to 
<a href="http://git.baltrad.eu/pgf.html">BALTRAD User Manual</a> for further
information. 

\section admin Administrative tasks

This section addresses administrative tasks related to node management and 
settings. Features presented here are available in \p Settings menu group, 
which is only available for node's administrator.  

\subsection radars Radars

Refer to \ref quick_radars section.

\subsection data_sources Data sources

Refer to \ref quick_data_sources section.

\subsection subscription_settings Subscription settings

Subscription settings is useful feature in case when subscription status between
two nodes is not synchronized. This situation may occur when e.g. node A 
subscribes data source X on node B. Then subscription status on node A is erased
due to some kind of error or faulty database operation. In such case information
about subscribed data source X still exists on node B, but no longer on node A.
To get rid of invalid subscription, user at node B should click \p Subscriptions 
item to expand menu. Two options are available: <tt>Remove downloads</tt> and 
<tt>Remove uploads</tt>, by analogy to subscription types described in 
\ref subscription_status. Let's say there invalid subscription of data source 
X at node B was discovered. User should click <tt>Remove uploads</tt> item. 
The following page will be displayed.     

\image html subscriptions_remove_upload.png

The page presents information about local data sources and respective 
subscribers. Click \p Select checkbox next to the desired subscription entry
and \p OK to remove. User will be asked to confirm subscription removal with 
the following warning.

\image html subscriptions_remove_upload_warn.png

Click \p OK to confirm. Invalid subscription entries will be deleted.   
\n
\n
The same operation can be performed on data downloads, that is subscriptions of
data sources at peer nodes. User can remove subscriptions selecting 
<tt>Remove downloads</tt> option from the menu. The following page presents 
information about data downloads.   

\image html subscriptions_remove_download.png

The page contains information about subscribed data sources and respective
operators (peer nodes), as well as about subscription status (active /inactive).
In order to remove subscription, click \p Select checkbox next to the desired 
subscription entry and \p OK to remove. User will be asked to confirm 
subscription removal with the following warning.     

\image html subscriptions_remove_download_warn.png

Click \p OK to confirm. Invalid subscription entries will be deleted.   

\subsection registry_settings Delivery registry settings

<tt>Delivery registry</tt> settings allow to keep track of the number of 
delivery registry entries stored in the system. Click 
<tt>Delivery registry</tt> to expand available options. \p Configure option 
allows to set maximum number of delivery registry entries or maximum age of 
entries. See the image below.      

\image html registry_settings.png

The <tt>Set active</tt> checkbox activates selected limit. If both checkboxes 
are checked, delivery registry entries will be deleted based on both maximum 
number and maximum age of entries, whichever criterion is met. 
\n
\n
\p Clear option allows to immediately remove all delivery registry entries. 
This option should be used with care. It is recommended to set limit on either 
number or age of delivery registry entries instead, as described above.     

\image html registry_clear.png

\subsection messages_settings Messages settings 

<tt>System messages</tt> settings allow to keep track of the number of log 
entries stored in the system. Click \p Messages to expand 
available options. \p Configure option allows to set maximum number of log
entries or maximum age of log entries. See the image below.      

\image html messages_settings.png

The <tt>Set active</tt> checkbox activates selected limit. If both checkboxes 
are checked, log entries will be deleted based on both maximum number and 
maximum age of log entries, whichever criterion is met. 
\n
\n
\p Clear option allows to immediately remove all log entries. This option should
be used with care. It is recommended to set limit on either number or age of log 
entries instead, as described above.     

\image html messages_clear.png

\subsection accounts User account management

	- Adding user account

Click <tt>User accounts</tt> and \p Add to set new user account. System will 
show user account data form allowing to provide some basic user's credentials 
as in the example below.  

\image html account_add.png

Fill in the form and click \p Save in order to save new user account. The system 
will issue an appropriate message depending on the operation status. 

\note
It is of key importance to select a suitable role for the newly established 
account. It is achieved by selecting user's role from \p Role selection 
drop-down list. System functionality available in the GUI is different for users 
with particular roles. The following roles are available: 
\n
- \p user - Basic role with very limited access to the system. User with this role
can browse data and system messages, access subscription and data source status 
information.   
- \p operator - Advanced user that can connect to peer nodes as well as start 
and stop subscriptions and access data processing tab. This role also extends 
user-level functionality.    
- \p admin - Node administrator with unlimited access to system options.
- \p peer - This role is reserved for data exchange and it is not available 
in the drop-down list.
\endnote

	- Modifying user account setttings

Click <tt>User accounts</tt> and \p Edit to modify existing user account. The
following form will be displayed.

\image html account_edit.png

Click given user's name to access account details page. Edit account settings 
and click \p Save. The system will confirm operation with suitable message.
\n
User's password can be modified independently from the rest of account's 
settings. Click <tt>User accounts</tt>, \p Edit, then click \p Change option 
next to the selected account. Type new password, retype to confirm and click
\p Save. From now on user can sign in using new password. 

\image html account_passwd.png 

\note
User accounts with peer-type role can't be modified, since this could affect 
data exchange process. It is still possible to remove this type of account. 
\endnote

	- Deleting user account 

To remove user account, click <tt>User accounts</tt> and select \p Remove 
option. The list of user accounts will be displayed.

\image html account_remove.png

Click a checkbox next to the account that is to be removed and click \p OK.
The system will confirm operation with suitable message.

\subsection node_settings Node settings

Refer to \ref quick_node_settings section.







\section supervisor Supervisor

\subsection supervisor_overview Overview
The supervisor provides a query interface API that can be used for monitoring the state of the
node. It is possible to query things like db status, bdb status, product availability and more.
If it is necessary to push status information to an external monitoring tool it can be solved
by writing a scheduled rule and queries the node for system information. 

\subsection supervisor_admin Administration
The supervisor only provides requestors about current state of the node so there is no real need for authentication procedures.
However, we have added an IP-block in the supervisor query interface so that we at least can avoid processing unessecary questions.
The supervisor administration interface can be reached by navigating to: Processing-&gt;Supervisor.

\image html supervisor_admin.png

The supervisor will always allow connections from 127.0.0.1. The rest of the ip-addresses that should be allowed should be added
in this administration GUI. The format of the ip-address should always be N.N.N.N where N either can be a value between 0-255 or a *.
There is actually not a test if the number is &gt; 255 but it will make the filter useless. Also, remember that if you are using a
proxy, the ip-package might contain an ip-address different than what you expect.

The supervisor GUI shows the ip-address from where you are connecting so if you are in doubt, you can always login
to the supervisor GUI and see what ip-address you should put in the filter.

\subsection supervisor_qinterface Query interface
Basic usage is to send a http-get query towards the supervisor and parse, check the response. The following query

\code
  wget -q -O- "http://localhost:8080/BaltradDex/supervisor.htm?reporters=bdb.object.status&sources=seang&objects=SCAN&minutes=5"
\endcode

would result in the following response

\code
<?xml version="1.0" encoding="UTF-8"?>

<system-status>
<reporter name="bdb.object.status" value="sources=seang&amp;objects=SCAN&amp;minutes=5" status="OK"/>
</system-status>
\endcode

which says that the bdb.object.status reporter determined that a seang SCAN has arrived within the last 5 minutes.

Each reporter supports different attributes and these combinations is described by each reporter.
It is possible to add more than one reporter in the same query and that is controlled by the reporters attribute. This means that if
you for example combine two different reporters you should consider that the reporters might use the same attribute which might not be
the wanted behaviour.
Each reporter will produce a separate &lt;reporter /&gt; entry that can be parsed separately.

As an example, if you want to know the db, bdb and bdb object status, this query
\code
  wget -q -O- "http://localhost:8080/BaltradDex/supervisor.htm?reporters=bdb.status,db.status,bdb.object.status&sources=seang&objects=SCAN&minutes=5"
\endcode

will produce

\code
<?xml version="1.0" encoding="UTF-8"?>

<system-status>
<reporter name="bdb.status" value="" status="OK"/>
<component name="db.status" value="" status="OK"/>
<reporter name="bdb.object.status" value="sources=seang&amp;objects=SCAN&amp;minutes=5" status="OK"/>
</system-status>
\endcode

that says that the baltrad db, postgres connection are working ok and that we got a SCAN from seang within the last 5 minutes.

\subsection supervisor_returncodes Return codes
The &lt;reporter&gt; tag contains a status attribute that specifies what the result of the operation was. This result can actually 
more than one if the reporter identifies a conflicting state. For example, if asking for two radar sources in the same query and one
of the radar sources has delivered within asked time but the other radar source hasn't. In that case, the result would be OK|COMMUNICATION_PROBLEM
or similar.

<table>
 <tr>
  <td>status code</td>
  <td>Description</td>
 </tr>
 <tr>
  <td>OK</td>
  <td>All seems ok</td>
 </tr>
 <tr>
  <td>COMMUNICATION_PROBLEM</td>
  <td>There is some problem related to communication</td>
 </tr>
 <tr>
  <td>MEMORY_PROBLEM</td>
  <td>We have identified that we might be leaking memory</td>
 </tr>
 <tr>
  <td>EXCHANGE_PROBLEM</td>
  <td>We have problems exchanging data</td>
 </tr>
 <tr>
  <td>PROCESSING_PROBLEM</td>
  <td>An error occured when trying to process data</td>
 </tr>
</table>

\subsection supervisor_formatting Formatting of responses
Currently, the only supported formatter is the xml formatter. In the future we hope that you will have access to various kinds
of formatters that is more suitable for your use. The formatter is specified by a separate attribute called named \b format and
the value would be \b xml. However, this is default behaviour so it can be omitted.

If you want to manually specify the formatter, then the request url would be:
\code
  http://..../BaltradDex/supervisor.htm?format=xml&reporter=......
\endcode

The format of the returned xml message will always be in the format:
\code
<?xml version="1.0" encoding="UTF-8"?>

<system-status>
[<reporter name="..." value="..." status="..."/>]*
</system-status>
\endcode


\subsection supervisor_reporters Reporters API
There are several reporters delivered with the system and this list will probably grow with time. 

\subsection supervisor_reporters_db_status Reporter name: db.status
This reporter will just verify that a query can be executed towards the postgres database. 

\subsubsection supervisor_reporters_db_args Arguments
N/A

\subsubsection supervisor_reporters_db_example Example usage

Query:
\code
wget -q -O- "http://localhost:8080/BaltradDex/supervisor.htm?reporters=db.status"
\endcode

Response:
\code
<?xml version="1.0" encoding="UTF-8"?>

<system-status>
<reporter name="db.status" value="" status="OK"/>
</system-status>
\endcode

\subsection supervisor_reporters_bdb_status Reporter name: bdb.status
This reporter will verify that the node has connection with the bdb server. 

\subsection supervisor_reporters_bdb_args Arguments
N/A

\subsubsection supervisor_reporters_bdb_example Example usage

Query:
\code
wget -q -O- "http://localhost:8080/BaltradDex/supervisor.htm?reporters=bdb.status"
\endcode

Response:
\code
<?xml version="1.0" encoding="UTF-8"?>

<system-status>
<reporter name="bdb.status" value="" status="OK"/>
</system-status>
\endcode

\subsection supervisor_reporters_radar_connection_status Reporter name: radar.connection.status
This reporter can be used to control if a radar has been able to provide the composites and volumes
with data without causing a timeout. If, for example, a composite is expecting a scan from searl
and this scan does not arrive within the timeout. Then, this reporter will know about that. This reporter is
a faster version of a product tester but not as accurate as the \ref supervisor_reporters_bdb_object_status "bdb object status reporter".

\subsubsection supervisor_reporters_radar_connection_args Arguments
<table>
  <tr>
    <td>Name</td>
    <td>Description</td>
  </tr>
  <tr>
    <td>sources</td>
    <td>A comma separated list of source names, e.g. searl,seang</td>
  </tr>
</table>

\subsubsection supervisor_reporters_radar_connection_example Example usage

Query:
\code
wget -q -O- "http://localhost:8080/BaltradDex/supervisor.htm?reporters=radar.connection.status&sources=searl,seang"
\endcode

Response:
\code
<?xml version="1.0" encoding="UTF-8"?>

<system-status>
<reporter name="radar.connection.status" value="sources=searl,seang" status="OK"/>
</system-status>
\endcode

\subsection supervisor_reporters_bdb_object_status Reporter name: bdb.object.status

This reporter is currently the most advanced reporter mechanism. It queries the baltrad db
for availability of objects (SCAN,PVOL,COMP,...) for sources (searl, seang, ...) and areas (swegmaps_2000, ...)
within a specific time limit in minutes.
This means that you are able to query for almost anything within the database and verify if you have got it in
time. However, the caveat to this is that it is a quite expensive version of reporter so make sure that you don't
affect perforance drastically by calling this reporter too frequently. You might notice that the performance for
handling incomming data will decrease if you continuously call this reporter.

\subsubsection supervisor_reporters_bdb_object_args Arguments
<table>
  <tr>
    <td>Name</td>
    <td>Description</td>
  </tr>
  <tr>
    <td>minutes</td>
    <td>The time limit backward in time to check in minutes. E.g. 5. Default 5</td>
  </tr>
  <tr>
    <td>objects</td>
    <td>A comma separated list of what/object types that should be looked up, for example SCAN,PVOL,COMP</td>
  </tr>
  <tr>
    <td>sources</td>
    <td>A comma separated list of sources (used with SCAN,PVOL,...), for example searl,seang</td>
  </tr>
  <tr>
    <td>areas</td>
    <td>A comma separated list of sources (used with COMP,...), for example swegmaps_2000</td>
  </tr>
</table>

You can combine for example SCAN,PVOL and COMP together with a list of sources and areas. 

\subsubsection supervisor_reporters_bdb_object_example Example usage


Query if a SCAN from seang and a COMP for area swegmaps_2000 has arrived within the last 5 minutes.

\code
wget -q -O- "http://localhost:8080/BaltradDex/supervisor.htm?reporters=bdb.object.status&sources=seang&areas=swegmaps_2000&objects=SCAN,COMP&minutes=5"
\endcode

Response:
\code
<?xml version="1.0" encoding="UTF-8"?>

<system-status>
<reporter name="bdb.object.status" value="sources=seang&amp;areas=swegmaps_2000&amp;objects=SCAN&amp;minutes=5" status="OK"/>
</system-status>
\endcode


\page trouble Troubleshooting


This section will be gradually updated, as the list of known problems is build
based on users' feedback.

\par
<b>Q:</b> Can't sing in to application locally with a given user name and password.
\par
<b>A:</b> Make sure that user credentials are valid. In case user account is correct,
verify that PostgreSQL server process is running on the node: 
\code
ps -ef |grep postgres
\endcode
In case PostgreSQL is not present, run server control script in order to launch 
the process.
\code
/opt/PostgreSQL/9.1/scripts/serverctl.sh start
\endcode 
Note that PostgreSQL executables might be located elswhere depending on the type
of installation.


\page exchange_format Data exchange format


\section exchange_general General information

BaltradDex uses standard HTTP message structure for communication. 
Request and response parameters are passed as HTTP message headers. However, 
for passing additional information between BALTRAD nodes, the following 
custom header fields are introduced:

\code
Node-Name: <name of requesting node>
Provider: [Peer|Injector]
\endcode

This information is essential for correct node identification within BALTRAD
network, as well as for message authentication. 

\attention
Provider header is applied to \ref exchange_post_file and allows to distinguish 
between request coming from the peer node and request sent by the injector, 
that is third-party software providing data from local production system.
It should take one of the following values: \p Injector in case of a request 
send by an injector software, and \p Peer in case of a request sent by the peer 
node. 

\section exchange_auth Authentication   
For safety reasons, all messages passed within BALTRAD network are 
authenticated. Authentication is based on private/public keys using 
<a href="http://www.keyczar.org">KeyCzar</a> toolkit.

\subsection exchange_hdr Authentication header 
For the purpose of authentication, a standard HTTP \p Authorization header 
is used. The header value consists of user name name and user-specific 
credentials in the following format:

\code
Authorization: <user name>:<credentials>
\endcode

\attention 
User name is used to locate and access keys in the keystore. By default, 
BaltradDex uses node name property for this purpose. Therefore node name 
provided at the stage of installation (or initialization of the keystore) 
should not be modified without a justified reason.

\subsection exchange_sign Signing a request
In order to sign a request, first an input message should be prepared. This 
message will be next used to generate a signature. Input message is assembled 
from the following request elements:

	- Request method 
	- Request URI
	- Content-Type request header
	- Content-MD5 request header
	- Date
  
Typical input message will look like the following:
\code
GET
http://example.baltrad.eu:8084/BaltradDex/get_datasource_listing.htm
text/html
aHR0cDovLzE ...
Fri, 6 Jul 2012 13:00:26 CEST
\endcode

\attention
The value of Content-MD5 request differs depending on the type of request. 
Refer to the documentation of particular request types for details.

Input message is signed with KeyCzar \p sign() method available in
\p org.keyczar.Signer class, resulting in Base64 encoded signature string. 
Exemplary authorization header will take the following form:

\code
Authorization: example.baltrad.eu:APa7608wLQI ...
\endcode
  
Once signed, the request is ready to submit. In case of a failure to 
authenticate the request on server side, the server will response with 
<tt>HTTP 401 Unauthorized</tt> status code. In case the server is unable 
to find a public key matching user name provided in \p Authorization header, 
<tt>HTTP 500 Internal Server Error</tt> response is returned.

\section exchange_datasource_listing Data source listing request

\par
\b Description
\n 
\n Request for data source listing. Reponse contains list of data sources 
available for a given user to subscribe.

\par 
\b Request

\par
- Request URI: <tt>datasource_listing.htm</tt>
- Method: <tt>POST</tt>
- Headers: <tt>Node-Name, Content-Type, Content-MD5, Date, Authorization</tt>
- Body: <tt>Subscriber node's credentials</tt>
\n
\n
- <b>Example:</b>
\code
POST http://baltrad.imgw.pl:8084/BaltradDex/datasource_listing.htm HTTP/1.1
Node-Name: baltrad.imgw.pl
Content-Type: application/json
Content-MD5: aHR0cDovLzE ...
Date: Fri, 6 Jul 2012 13:00:26 CEST
Authorization: baltrad.imgw.pl:APa7608wLQI ...
{
  "name":"baltrad.imgw.pl",
  "nodeAddress":"http://baltrad.imgw.pl:8084",
  "orgName":"Institute of Meteorology and Water Management",
  "orgUnit":"Remote Sensing Department",
  "locality":"Warsaw",
  "state":"Poland",
  "countryCode":"PL"
}
\endcode
\par
\note
Content-MD5 header value consists of Base64-encoded request URI.

\par 
\b Response

\par
- Headers: <tt>Node-Name</tt>
- Status: 
     - <tt>200 OK</tt> : Success - data sources subscribed
	 - <tt>201 Created</tt> : Success - user account established
     - <tt>401 Unauthorized</tt> : Server failed to authenticate request
     - <tt>500 Internal server error</tt> : Server error			
- Body: 
	- <tt>201</tt> : User account credentials
	- <tt>200</tt> : List of subscribed data sources
\n
\n
- <b>Example 201 response:</b>
\code
Node-Name: baltrad-backup.imgw.pl
{
  "name":"baltrad.imgw.pl",
  "nodeAddress":"http://baltrad.imgw.pl:8084",
  "orgName":"Institute of Meteorology and Water Management",
  "orgUnit":"Remote Sensing Department",
  "locality":"Warsaw",
  "state":"Poland",
  "countryCode":"PL"
}
\endcode
- <b>Example 200 response:</b>
\code
Node-Name: baltrad-backup.imgw.pl
[
  {
    "name":"PoznańSCAN",
    "type":"peer",
    "description":"Polar scans from Poznań"
  },
  {
    "name":"LegionowoPVOL",
    "type":"peer",
    "description":"Polar volumes from Legionowo"
  },
  {
    "name":"PastewnikALL",
    "type":"peer",
    "description":"Polar scans and volumes from Pastewnik"
  }
]
\endcode

\section exchange_start_subscription Start subscription request

\par
\b Description
\n 
\n Request for data source subscription. Reponse contains list of successfully 
subscribed data sources. 

\par 
\b Request

\par
- Request URI: <tt>start_subscription.htm</tt>
- Method: <tt>POST</tt>
- Headers: <tt>Node-Name, Content-Type, Content-MD5, Date, Authorization</tt>
- Body: <tt>List of data sources selected for subscription</tt>
\n
\n
- <b>Example:</b>
\code
POST http://baltrad.imgw.pl:8084/BaltradDex/start_subscription.htm HTTP/1.1
Node-Name: baltrad.imgw.pl
Content-Type: application/json
Content-MD5: aHR0cDovLzE ...
Date: Fri, 6 Jul 2012 13:00:26 CEST
Authorization: baltrad.imgw.pl:APa7608wLQI ...
[
  {
    "name":"PoznańSCAN",
    "type":"peer",
    "description":"Polar scans from Poznań"
  },
  {
    "name":"LegionowoPVOL",
    "type":"peer",
    "description":"Polar volumes from Legionowo"
  }
]
\endcode
\par
\note
Content-MD5 header value consists of Base64-encoded list of data sources 
selected for subscription.

\par 
\b Response

\par
- Headers: <tt>Node-Name</tt>
- Status: 
     - <tt>200 OK</tt> : Success
     - <tt>206 Partial Content</tt> : Subscription request was completed partially
     - <tt>401 Unauthorized</tt> : Server failed to authenticate request
     - <tt>404 Not Found</tt> : Generic subscription error
     - <tt>500 Internal server error</tt> : Server error 					
- Body: <tt>List of successfully subscribed data sources</tt>
\n
\n
- <b>Example:</b>
\code
Node-Name: baltrad-backup.imgw.pl
[
  {
    "name":"PoznańSCAN",
    "type":"peer",
    "description":"Polar scans from Poznań"
  },
  {
    "name":"LegionowoPVOL",
    "type":"peer",
    "description":"Polar volumes from Legionowo"
  }
]
\endcode

\section exchange_update_subscription Update subscription request

\par
\b Description
\n 
\n Request for subscription update. Reponse contains list of updated 
subscriptions. 

\par 
\b Request

\par
- Request URI: <tt>update_subscription.htm</tt>
- Method: <tt>POST</tt>
- Headers: <tt>Node-Name, Content-Type, Content-MD5, Date, Authorization</tt>
- Body: <tt>List of subscriptions</tt>
\n
\n 
- <b>Example:</b>
\code
POST http://baltrad.imgw.pl:8084/BaltradDex/update_subscription.htm HTTP/1.1
Node-Name: baltrad.imgw.pl
Content-Type: application/json
Content-MD5: aHR0cDovLzE ...
Date: Fri, 6 Jul 2012 13:00:26 CEST
Authorization: baltrad.imgw.pl:APa7608wLQI ...
[
  {
    "type":"local",
    "date":1357909585672,
    "active":true,
    "dataSource":"LegionowoPVOL",
    "user":"baltrad.imgw.pl",
    "syncronized":true
  },  
  {
    "type":"local",
    "date":1357909585757,
    "active":true,
    "dataSource":"PoznańSCAN",
    "user":"baltrad.imgw.pl",
    "syncronized":true
  }
]
\endcode
\par
\note
Content-MD5 header value consists of Base64-encoded list of subscriptions.

\par 
\b Response

\par
- Headers: <tt>Node-Name</tt>
- Status: 
     - <tt>200 OK</tt> : Success
     - <tt>206 Partial Content</tt> : Subscription request was completed partially 
     - <tt>401 Unauthorized</tt> : Server failed to authenticate request 
     - <tt>404 Not Found</tt> : Generic subscription error 
     - <tt>500 Internal server error</tt> : Server error 
- Body: <tt>List of successfully updated subscriptions</tt>
\n
\n 
- <b>Example:</b>
\code
Node-Name: baltrad-backup.imgw.pl
[
  {
    "type":"local",
    "date":1357909625659,
    "active":true,
    "dataSource":"LegionowoPVOL",
    "user":"baltrad.imgw.pl",
    "syncronized":true
  },
  {
    "type":"local",
    "date":1357909625706,
    "active":true,
    "dataSource":"PoznańSCAN",
    "user":"baltrad.imgw.pl",
    "syncronized":true
  }
]
\endcode

\section exchange_post_key Post key request
\par
\b Description
\n 
\n Post key request. Reponse indicates post key operation result. 

\par 
\b Request

\par
- Request URI: <tt>post_key.htm</tt>
- Method: <tt>POST</tt>
- Headers: <tt>Node-Name, Content-Type, Content-MD5, Date, Authorization</tt>
- Body: <tt>Key content</tt>
\n
\n 
- <b>Example:</b>
\code
POST http://baltrad.imgw.pl:8084/BaltradDex/post_key.htm HTTP/1.1
Node-Name: baltrad.imgw.pl
Content-Type: application/zip
Content-MD5: aHR0cDovLzE ...
Date: Fri, 6 Jul 2012 13:00:26 CEST
Authorization: baltrad.imgw.pl:APa7608wLQI ...
<key content>
\endcode
\par
\note
Content-MD5 header value consists of MD5-encoded key content as hexadecimal
string.
\endnote
\par 
\b Response

\par
- Headers: <tt>Node-Name</tt>
- Status: 
     - <tt>200 OK</tt> : Success
     - <tt>401 Unauthorized</tt> : Server failed to authenticate request
     - <tt>409 Conflict</tt> : Key already exists on server
     - <tt>500 Internal server error</tt> : Server error 		
- Body: <tt>No content</tt>
\n
\n 
- <b>Example:</b>
\code
Node-Name: baltrad-backup.imgw.pl
\endcode

\section exchange_post_file Post file request
\par
\b Description
\n 
\n Post file request. Reponse indicates post file operation result. 

\par 
\b Request

\par
- Request URI: <tt>post_file.htm</tt>
- Method: <tt>POST</tt>
- Headers: <tt>Node-Name, Provider, Content-Type, Content-MD5, Date, Authorization</tt>
- Body: <tt>File content</tt>
\n
\n 
- <b>Example:</b>
\code
POST http://baltrad.imgw.pl:8084/BaltradDex/post_file.htm HTTP/1.1
Node-Name: baltrad.imgw.pl
Provider: Peer
Content-Type: application/x-hdf5
Content-MD5: aHR0cDovLzE ...
Date: Fri, 6 Jul 2012 13:00:26 CEST
Authorization: baltrad.imgw.pl:APa7608wLQI ...
<file content>
\endcode
\par
\note
Content-MD5 header value consists of Base64-encoded request URI.

\par 
\b Response

\par
- Headers: <tt>Node-Name</tt>
- Status: 
     - <tt>200 OK</tt> : Success
     - <tt>401 Unauthorized</tt> : Server failed to authenticate request
     - <tt>404 Not Found</tt> : Generic post file error
     - <tt>409 Conflict</tt> : File already stored in the database
     - <tt>500 Internal server error</tt> : Server error 		
- Body: <tt>No content</tt>
\n
\n 
- <b>Example:</b>
\code
Node-Name: baltrad-backup.imgw.pl
\endcode


\section exchange_post_message Post message request
\par
\b Description
\n 
\n Post message request. Message body is processed by Beast messaginng 
interface. Reponse indicates post message operation result. 

\par 
\b Request

\par
- Request URI: <tt>post_message.htm</tt>
- Method: <tt>POST</tt>
- Headers: <tt>Node-Name, Content-Type, Content-MD5, Date, Authorization</tt>
- Body: <tt>Message string</tt>
\n
\n 
- <b>Example:</b>
\code
POST http://baltrad.imgw.pl:8084/BaltradDex/post_message.htm HTTP/1.1
Node-Name: baltrad.imgw.pl
Content-Type: text/html
Content-MD5: aHR0cDovLzE ...
Date: Fri, 6 Jul 2012 13:00:26 CEST
Authorization: baltrad.imgw.pl:APa7608wLQI ...
<Message body>
\endcode
\par
\note
Content-MD5 header value consists of Base64-encoded message body.   

\par 
\b Response

\par
- Headers: <tt>Node-Name</tt>
- Status: 
     - <tt>200 OK</tt> : Success
     - <tt>401 Unauthorized</tt> : Server failed to authenticate request
     - <tt>500 Internal server error</tt> : Server error / Unsupported message
											format  		
- Body: <tt>No content</tt>
\n
\n 
- <b>Example:</b>
\code
Node-Name: baltrad-backup.imgw.pl
\endcode

\attention
Because message body is processed by Beast messaging interface, its format 
should match XML-based message format defined by Beast. In case of attempt to
pass a message of unsupported format, the server will respond with 
<tt> Internal Server Error (500)</tt>. Refer to Beast framework documentation 
for details.



\page support Support & feedback 



Ask for support and send your feedback to: 
\n\n
\p maciej@baltrad.eu
\n
\n
\p support@baltrad.eu
*/
