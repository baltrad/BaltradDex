/***************************************************************************************************
*
* Copyright (C) 2009-2011 Institute of Meteorology and Water Management, IMGW
*
* This file is part of the BaltradDex software.
*
* BaltradDex is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* BaltradDex is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with the BaltradDex software.  If not, see http://www.gnu.org/licenses.
*
***************************************************************************************************/

package eu.baltrad.dex.log.model;

import org.apache.log4j.spi.LoggingEvent;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import java.io.Serializable;
import java.text.SimpleDateFormat;

/**
 * Class implements system message object.
 *
 * @author Maciej Szewczykowski | maciej@baltrad.eu
 * @version 1.0
 * @since 1.0
 */
public class LogEntry extends LoggingEvent implements Serializable {
//---------------------------------------------------------------------------------------- Constants
    /** Date format string */
    private final static String DATE_FORMAT = "yyyy/MM/dd";
    /** Time format string */
    private final static String TIME_FORMAT = "HH:mm:ss";

    /** Marks a message generated by the DEX */
    public final static String LOG_SRC_DEX = "DEX";
    /** Marks a message generated by the BEAST */
    public final static String LOG_SRC_BEAST = "BEAST";
    /** Marks a message generated by the PGF */
    public final static String LOG_SRC_PGF = "PGF";

    /** Log level mappings */

    /** Infomative log level */
    public final static Level LEVEL_INFO = Level.INFO;
    /** Warning log level */
    public final static Level LEVEL_WARN = Level.WARN;
    /** Error log level */
    public final static Level LEVEL_ERROR = Level.ERROR;
    /** Fatal log level */
    public final static Level LEVEL_FATAL = Level.FATAL;
//---------------------------------------------------------------------------------------- Variables
    /** Log entry ID */
    private int id;
    /** Determines the system that generated the message */
    private String system;
    /** Auxiliary variable storing date as string */
    private String dateStr;
    /** Auxiliary variable storing time as string */
    private String timeStr;
//------------------------------------------------------------------------------------------ Methods
    /**
     * Constructor
     *
     * @param system Determines the system that produced this message. Note that in the case of
     * original <b>LoggingEvent</b> constructor this parameter determines fully qualified name
     * of the calling category class.
     * @param timeStamp Current system time in milliseconds
     * @param level Determines level of this log entry.
     * @param message Actual message string.
     */
    public LogEntry( String system, long timeStamp, Level level, Object message ) {
        super( system, LogManager.getLogger(), timeStamp, level, message, new Throwable() );
        this.system = system;
        setDateStr( timeStamp );
        setTimeStr( timeStamp );
    }
    /**
     * Constructor
     *
     * @param system Determines the system that produced this message. Note that in the case of
     * original <b>LoggingEvent</b> constructor this parameter determines fully qualified name
     * of the calling category class.
     * @param logger References logger object. Use either Logger available in LogManager class or
     * provide a reference to your own logger instance.
     * @param level Determines level of this log entry.
     * @param message Actual message string.
     */
    public LogEntry( String system, Logger logger, Level level, Object message ) {
        super( system, logger, System.currentTimeMillis(), level, message, new Throwable() );
        this.system = system;
        setDateStr( System.currentTimeMillis() );
        setTimeStr( System.currentTimeMillis() );
    }
    /**
     * Constructor
     *
     * @param system Determines the system that produced this message. Note that in the case of
     * original <b>LoggingEvent</b> constructor this parameter determines fully qualified name
     * of the calling category class.
     * @param level Determines level of this log entry.
     * @param message Actual message string.
     */
    public LogEntry( String system, Level level, Object message ) {
        super( system, LogManager.getLogger(), System.currentTimeMillis(), level, message,
                new Throwable() );
        this.system = system;
        setDateStr( System.currentTimeMillis() );
        setTimeStr( System.currentTimeMillis() );
    }
    /**
     * Method gets log entry ID.
     *
     * @return Log entry ID
     */
    public int getId() { return id; }
    /**
     * Method sets log entry ID.
     *
     * @param id Log entry ID
     */
    public void setId( int id ) { this.id = id; }
    /**
     * Gets name of the system that generated the message.
     *
     * @return System name
     */
    public String getSystem() { return system; }
    /**
     * Sets name of the system that generated the message.
     *
     * @param source the source to set
     */
    public void setSystem( String system ) { this.system = system; }
    /**
     * Gets date string.
     *
     * @return Date string
     */
    public String getDateStr() { return dateStr; }
    /**
     * Sets date string.
     *
     * @param dateStr Date string to set
     */
    public void setDateStr( long time ) {
        SimpleDateFormat format = new SimpleDateFormat( DATE_FORMAT );
        this.dateStr = format.format( time );
    }
    /**
     * Gets time string.
     *
     * @return Time string
     */
    public String getTimeStr() { return timeStr; }
    /**
     * Sets time string.
     *
     * @param timeStr Time string to set
     */
    public void setTimeStr( long time ) {
        SimpleDateFormat format = new SimpleDateFormat( TIME_FORMAT );
        this.timeStr = format.format( time );
    }
}
//--------------------------------------------------------------------------------------------------